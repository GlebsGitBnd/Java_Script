////ЗАДАНИЕ 1!
////Создать массив «Список покупок». Каждый элемент массива является объектом,
////который содержит название продукта, необходимое количество и куплен или нет.
////Написать несколько функций для работы с таким массивом.
////
////      1. Вывод всего списка на экран таким образом, чтобы сначала шли некупленные
////продукты, а потом – купленные.
////
////      2. Добавление покупки в список. Учтите, что при добавлении покупки с уже
////существующим в списке продуктом, необходимо увеличивать количество в
////существующей покупке, а не добавлять новую.
////
////      3. Покупка продукта. Функция принимает название продукта и отмечает его как купленный.
//"use strict";
//let spase = "";     //Позже нужна будет чтобы разделять списки
//
//let listOfPurchase = new Array ();
//listOfPurchase [0] = {
//    name: "Хлеб",
//    amount: 1,
//    status: "Не куплен"
//};
//
//listOfPurchase [1] = {
//    name: "Курица",
//    amount: 1,
//    status: "Куплен"
//};
//
//listOfPurchase [2] = {
//    name: "Яйца",
//    amount: 10,
//    status: "Не куплен"
//};
//
//listOfPurchase [3] = {
//    name: "Сыр",
//    amount: 2,
//    status: "Не куплен"
//};
//
//listOfPurchase [4] = {
//    name: "Молоко",
//    amount: 1,
//    status: "Куплен"
//};
//
//listOfPurchase [5] = {
//    name: "Сырок",
//    amount: 2,
//    status: "Не куплен"
//};
////Составили список товаров
//
///////////////////////////////////////////////////////////////////////////////////////////
//
////ФУНКЦИЯ ДЛЯ ВЫВОДА СПИСКА ТОВАРОВ
//function yourListInMoment() {           //выводит список без ключей
//    for (let i in listOfPurchase) {         //перебирает объекты
//        for (let key in listOfPurchase[i]) {        //перебирает ключи в каждом объекте
//            console.log(listOfPurchase[i][key]);    //выводит все значения ключей в объекте
//        }
//        console.log(spase);          //пробел между объектами для удобного просмотра
//    }
//    console.log("КОНЕЦ СПИСКА!")        //разделяет списки если мы ходит посмотреть
//}                                   //список с какими то изменениями
//yourListInMoment();      //выводим список в данный момент времени
//
///////////////////////////////////////////////////////////////////////////////////////////
//
////ФУНКЦИЯ ДЛЯ ЗАДАНИЯ 1.1(СНАЧАЛА НЕ КУПЛЕННЫЕ ПОТОМ КУПЛЕННЫЕ)
//function listStatusSort() {
//    function statusSort (a,b) {
//        if (a.status < b.status) {          //задает приоритет буквам(чем буква
//            return -1;                       //ниже тем ниже будет стоять объект)
//        }
//        if (a.status > b.status) {          //задает приоритет буквам( чем буква
//            return 1;                       //выше тем выше объект)
//        }
//        return 0;
//    }
//    listOfPurchase.sort(statusSort);          //выводит отсортированный список
//    yourListInMoment();
//}
//listStatusSort();       //отсортировали список и вывели
//
///////////////////////////////////////////////////////////////////////////////////////////
//
////ФУНКЦИЯ К ЗАДАНИЮ 1.2 ДОБАВЛЕНИЕ ТОВАРА
//function eddProduct() {
//    let nameNew = prompt("Введите название продукта который хотите добавить.");
//    let amountNew = +prompt("Введите количество продукта");
//    let statusNew = prompt("Введите статус продукта(Куплен,Не куплен)");
//    //Записываем в переменные продукт который хотим добавить
//    for (let i in listOfPurchase) {
//        if((listOfPurchase[i].name == nameNew) && (listOfPurchase[i].status == statusNew)) {
//            listOfPurchase[i].amount += amountNew;
//            return yourListInMoment();
//        }
//    }
//    //Перебираем название всех продуктов и сравниваем с тем который хотим добавть
//    //Так же указал что складываться должны продукты только с одинаковым статусом
//    listOfPurchase [listOfPurchase.length] = {
//    name: nameNew,
//    amount: amountNew,
//    status: statusNew
//    }
//    return yourListInMoment();
//    //если продукт не дублируется добавляем новый и возвращаем список для просмотра
//}
//eddProduct();   //выводим обновленный список с добавленным товаром
//
///////////////////////////////////////////////////////////////////////////////////////////
//
////ФУНКЦИЯ К ЗАДАНИЮ 1.3 ДЛЯ ОТМЕТКИ ТОВАРОВ КАК КУПЛЕННЫЕ
//function markerOfPurchase() {
//    let nameNew = prompt("Введите название продукта который хотите отметить.");
//    for (let i in listOfPurchase) {
//        if (listOfPurchase[i].name == nameNew) {
//            listOfPurchase[i].status = "Куплен";
//            return yourListInMoment();
//        }
//    }
//    //записываем переменную с названием продукта, перебираем все переменные
//    //меняем статус той переменной которую отмечаем
//}
//markerOfPurchase();     //отмечаем и выводим список с отмеченым товаром
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
//
//
////ЗАДАНИЕ 2
////Создать массив, описывающий чек в магазине. Каждый элемент массива состоит из
////названия товара, количества и цены за единицу товара. Написать следующие функции.
////1. Распечатка чека на экран.
////2. Подсчет общей суммы покупки.
////3. Получение самой дорогой покупки в чеке.
////4. Подсчет средней стоимости одного товара в чеке.
//
//"use strict";
//let yourCheck = new Array ();
//yourCheck [0] = {
//    name: "Хлеб",
//    amount: 2,
//    prise: 30
//};
//
//yourCheck [1] = {
//    name: "Курица",
//    amount: 1,
//    prise: 350
//};
//
//yourCheck [2] = {
//    name: "Яйца",
//    amount: 1,
//    prise: 70
//};
//
//yourCheck [3] = {
//    name: "Сыр",
//    amount: 2,
//    prise: 250
//};
//
//yourCheck [4] = {
//    name: "Молоко",
//    amount: 1,
//    prise: 60
//};
//
//yourCheck [5] = {
//    name: "Сырок",
//    amount: 2,
//    prise: 40
//};
//
//yourCheck [6] = {
//    name: "Шоколадка",
//    amount: 5,
//    prise: 55
//};
////СОЗДАЛИ СПИСОК ДЛЯ ЧЕКА
//
///////////////////////////////////////////////////////////////////////////////////////////
//
//let sumPrise = 0;  //счетчик для суммы покупок
//let highPrise = 0;  //счетчик для самой высокой цены
//let highPriseProduct = ""; //записывает в себя объект с продуктом с самой высокой ценой
//
//for (let i = 0; i < yourCheck.length; i++) {        //запустил цикл в котором сделал все расчеты по заданию
//    sumPrise += yourCheck[i].prise * yourCheck[i].amount;   //складывает цены продуктов
//    console.log((i + 1)+":" + yourCheck[i].name + "   Количество:" + yourCheck[i].amount
//    + "   Цена: " + yourCheck[i].prise + " руб.");
//    //(1. Распечатка чека на экран.)
//    if (yourCheck[i].prise > highPrise) {       //считает самый дорогой товар
//        highPrise = yourCheck[i].prise;
//        highPriseProduct = yourCheck[i];       //Записывает в себя объект с самым дорогим товаром
//    }
//}
////цикл перебирает все объекты массива и выводит чек в консоль
//
//console.log("Итоговая сумма: " + sumPrise + "руб.");
////2. Подсчет общей суммы покупки.
//
//console.log("Самый дорогой продукт: " + highPriseProduct.name + " Цена за 1шт. - "
//+ highPriseProduct.prise + "руб.");
////3. Получение самой дорогой покупки в чеке.
//
//console.log("Средняя цена одного товара: " + sumPrise / (yourCheck.length - 1) + "руб.");
////4. Подсчет средней стоимости одного товара в чеке.
//
//
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
//
//
////Задание 3
////Создать массив css-стилей (цвет, размер шрифта, выравнивание, подчеркивание и
////т. д.). Каждый элемент массива – это объект, состоящий из двух свойств: название
////стиля и значение стиля. Написать функцию, которая принимает массив стилей и
////текст, и выводит этот текст с помощью document.write() в тегах <p></p>, добавив
////в открывающий тег атрибут style со всеми стилями, перечисленными в массиве.
//
//"use strict";
//let allCssStyles = new Array ();
//allCssStyles [0] = {
//    name: "color",
//    value: "green"
//};
//
//allCssStyles [1] = {
//    name: "font-size",
//    value: "40px"
//};
//
//allCssStyles [2] = {
//    name: "text-align",
//    value: "center"
//};
//
//allCssStyles [3] = {
//    name: "font-style",
//    value: "italic"
//};
//
//allCssStyles [4] = {
//    name: "text-decoration",
//    value: "underline"
//};
////СОЗДАЛИ МАССИВ СТИЛЕЙ
//
//function useStyle(){            //функция вызывает ввод текста и печатает на экран
//    let list = '';
//    function cssStyle() {         //функция которая записывает все стили в переменную
//        for (let i in allCssStyles) {
//            list += allCssStyles[i].name +": " + allCssStyles[i].value + "; "
//        }
//        return list;
//    }
//    let yourText = prompt("Введит текст.");
//    document.write('<p style="' + cssStyle() + '"> ' + yourText + '</p>');
//}
//useStyle(); //ввод текста и вывод на экран
//
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
//
//
//Задание 4
//Создать массив аудиторий академии. Объект-аудитория состоит из названия,
//количества посадочных мест (от 10 до 20) и названия факультета, для которого
//она предназначена. Написать несколько функций для работы с ним.
//1. Вывод на экран всех аудиторий.
//2. Вывод на экран аудиторий для указанного факультета.
//3. Вывод на экран только тех аудиторий, которые подходят для переданной группы.
//Объект-группа состоит из названия,количества студентов и названия факультета.
//4. Функция сортировки аудиторий по количеству мест.
//5. Функция сортировки аудиторий по названию (по алфавиту).
//
//"use strict";
//let academiaFull = new Array ();
//academiaFull [0] = {
//    name: "Фармокология",
//    faculty: "Биологический",
//    amount: 18
//};
//
//academiaFull [1] = {
//    name: "Менеджмент",
//    faculty: "Экономический",
//    amount: 14
//};
//
//academiaFull [2] = {
//    name: "Кибернетика",
//    faculty: "Математический",
//    amount: 11
//};
//
//academiaFull [3] = {
//    name: "Маркетинг",
//    faculty: "Экономический",
//    amount: 19
//};
//
//academiaFull [4] = {
//    name: "Высшая математика",
//    faculty: "Математический",
//    amount: 16
//};
//
//academiaFull [5] = {
//    name: "Ядерная физика",
//    faculty: "Физический",
//    amount: 12
//};
//
//academiaFull [6] = {
//    name: "Общая психология",
//    faculty: "Психологический",
//    amount: 17
//};
////ОПИСАЛИ АУДИТОРИИ АКАДЕМИЙ
//
///////////////////////////////////////////////////////////////////////////////////////////
//
////1.ВЫВОДИТ СПИСОК АУДИТОРИЙ И ЕЁ СВОЙСТВ
//function academiaList() {
//    for (let i in academiaFull) {
//        console.log(`
//        Название: ${academiaFull[i].name}
//        Факультет: ${academiaFull[i].faculty}
//        Места: ${academiaFull[i].amount}`)
//    }
//}
//academiaList ();        //вывели список в консоль
//
///////////////////////////////////////////////////////////////////////////////////////////
//
////2.ВЫВОДИТ НА ЭКРАН АУДИТОРИИ ДЛЯ УКАЗАННОГО ФАКУЛЬТЕТА
//function yourFaculty() {
//    let nameFaculty = prompt("Введите факультет:");
//    let allNameAudit = '';
//    for (let i in academiaFull){
//        if(nameFaculty == academiaFull[i].faculty) {
//            allNameAudit = academiaFull[i].name;
//            console.log(allNameAudit);
//        }
//    }
//}
//yourFaculty()       //вводим факультет выводим айдитории для него
//
///////////////////////////////////////////////////////////////////////////////////////////
//
////3.ВЫВОДИТ СУЩЕСТВУЮЩУЮ АУДИТОРИЮ ЕСЛИ ПАРАМЕТРЫ НА ВВОД СОВПАДАЮТ
//function academiaGroup() {
//    let name = prompt("Введите название группы:");
//    let faculty = prompt("Введите факультет группы:");
//    let amount = prompt("Введите количество мест:");
//    for(let i in academiaFull) {
//        if(name == academiaFull[i].name && faculty == academiaFull[i].faculty &&
//        amount == academiaFull[i].amount) {
//            console.log(`
//            Название: ${academiaFull[i].name}
//            Факультет: ${academiaFull[i].faculty}
//            Места: ${academiaFull[i].amount}`);
//            return true;
//       }
//    }
//    console.log("Группы с такими параметрами нет");
//}
//academiaGroup()     //вводим параметры  выводим совпадения если они есть
//
///////////////////////////////////////////////////////////////////////////////////////////
//
////4.ВЫВОДИТ ОТСОРТИРОВАННЫЙ СПИСОК ПО КОЛИЧЕСТВУ МЕСТ
//function sortAcademiaNumber() {
//    function sortNumber(a,b) {      //функция для сортировки по количеству
//        if (a.amount > b.amount) {
//            return 1;
//        }
//        if (a.amount < b.amount) {
//            return -1;
//        }
//        return 0;
//    }
//    academiaFull.sort(sortNumber);
//    academiaList();
//}
//sortAcademiaNumber()     //выводит обновленный отсортированный список по количеству мест
//
///////////////////////////////////////////////////////////////////////////////////////////
//
////5.ВЫВОДИТ ОТСОРТИРОВАННЫЙ СПИСОК ПО ИМЕНИ АУДИТОРИИ
//function sortAcademiaName() {
//    function sortName(a,b) {        //функция для сортировки поимени
//        if (a.name > b.name) {
//            return 1;
//        }
//        if (a.name < b.name) {
//            return -1;
//        }
//        return 0;
//    }
//    academiaFull.sort(sortName);
//    academiaList();
//}
//sortAcademiaName()      //выводит обновленный отсортированный список по имени аудитории
















